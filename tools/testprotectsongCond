#!/usr/bin/env python3

# Based on the previous protect song the recorded user password hashes are pulled into the python environment and user ecdh public keys are generated. These public keys are not stored but should be used in this environment for creating shared secrets. If the public keys are stored, then the shared secrets can be easily calculated since the shared secret function uses both the user generated secret (should be the public key) and the open song master key secret (song public key generated from random private key). So, overall, the input user private key is hashed and used to generate an ecdh public key. The public key is input to the ecdh shared key function along with the public key of the song (generated from ecdh keygen function using something random as the private key). A shared secret for the user is output. The generated shared secret is then used as an AES key to symmetrically encrypt the song private key (random key). In parallel to all this, the song is encrypted with the random key. Outside of this protectsong python script the random song key is unknown until it is decrypted with the individual user shared secrets.

import random
import string

def randomStringDigits(stringLength=10):
    """Generate a random string of letters and digits """
    lettersAndDigits = string.ascii_letters + string.digits
    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))


#Assuming the user private key hashes are available (done in testprotectsong), the next step is to generate a random key for the song. This could be some timestamp passed into a rand function or whatever (up to you).

master_private_key = randomStringDigits()
print(master_private_key)



#Now a random key for the song is generated so the song should be encrypted. Encryption currently happens in a C function using ctypes, so the raw song should be input to the ctypes encrypt function. The encrypted song can either be passed to a file along with the metadata and other in the c environment or passed back out to the python environment. This implementation will pass the encrypted song back out from ctypes to the python environment (file generation will be handled later).  





#Now we have the encrypted song and the song master key. The song master key should be passed into another ctypes function that handles ecdh public key generation. The master public key is output from ctypes back to the python environment. 




#Now a loop through each user is started. A ctypes function for generating ecdh shared secrets is used in the loop. Each loop iteration, the user hashed pin from the recorded file is input to a ctypes ecdh keygen function and outputs a user public key. The user public key and the master public key are inputed to the ctypes ecdh shared secret function and a shared secret is outputed. The user shared secret is passed into the ctypes encryption function along with the master private key (random key). The output is the encrypted master private key. Each encrypted song key is generated by the end of this loop (Key mapping details TBD). 






 

